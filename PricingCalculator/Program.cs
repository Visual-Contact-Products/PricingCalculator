using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using PricingCalculator.Clients;
using PricingCalculator.Clients.Interfaces;
using PricingCalculator.Configurations;
using PricingCalculator.Data;
using PricingCalculator.Data.Repositories.CategoryRepositories;
using PricingCalculator.Data.Repositories.ProductRepositories;
using PricingCalculator.Data.Repositories.RefreshTokenRepositories;
using PricingCalculator.Helpers;
using PricingCalculator.Models;
using PricingCalculator.Services.AuthServices;
using PricingCalculator.Services.CategoryServices;
using PricingCalculator.Services.ProductServices;
using PricingCalculator.Services.RoleServices;
using PricingCalculator.Services.TokenServices;
using PricingCalculator.Services.UserServices;
using System.Text;
using System.Text.Json.Serialization;
using User.Microservice.Services.TokenServices;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers().
                AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
                });

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext<DataContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("ConnectionString"));
});

builder.Services.AddIdentity<PricingCalculator.Models.User, Role>(options =>
{
    // Cuztomization of the password requirements and user requirements.
    options.Password.RequiredLength = 6;
    options.Password.RequireDigit = true;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequireUppercase = true;
    options.Password.RequireLowercase = true;
    options.User.RequireUniqueEmail = true;
})
.AddEntityFrameworkStores<DataContext>()
.AddDefaultTokenProviders();

// Adding JWT authentication to the container.
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateActor = true,
        ValidateIssuer = false,
        ValidateAudience = false,
        RequireExpirationTime = true,
        ValidateIssuerSigningKey = true,
        IssuerSigningKey =
            new SymmetricSecurityKey(Encoding.UTF8.GetBytes(
                builder.Configuration.GetSection("Jwt:Key").Value!)
            ),
        ClockSkew = TimeSpan.Zero
    };
});

// Configuring the DataProtectionTokenProvider to generate tokens with a lifespan of 2 hours.
builder.Services.Configure<DataProtectionTokenProviderOptions>(
    // Provide a configuration action
    options =>
    {
        // Set the lifespan of the tokens generated by the DataProtectionTokenProvider
        // In this case, the lifespan is set to 2 hours
        options.TokenLifespan = TimeSpan.FromHours(2);
    }
);

builder.Services.AddScoped<IProductService, ProductService>();
builder.Services.AddScoped<ICategoryService, CategoryService>();
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IRoleService, RoleService>();
builder.Services.AddScoped<IAuthenticationService, AuthenticationService>();
builder.Services.AddScoped<IGetUserInfo, GetUserInfo>();
builder.Services.AddScoped<ITokenService, TokenService>();
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();
builder.Services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();

// Adding Mapster global configurations to the container.
builder.Services.AddMapster();

builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        policy.WithOrigins(builder.Configuration.GetSection("Frontend:BaseUrl").Value!)
        .AllowAnyHeader()
        .AllowAnyMethod();
    });
});

builder.Services.AddHttpClient<IEmailClient, EmailClient>(client =>
{
    client.BaseAddress = new Uri(builder.Configuration.GetSection("Microservices:Email:BaseUrl").Value!);
    client.DefaultRequestHeaders.Add("Accept", "Aplication/json");
});

// Configure the routes strings to be lowercase, but not the query strings.
builder.Services.Configure<RouteOptions>(options =>
{
    options.LowercaseUrls = true;
    options.LowercaseQueryStrings = false;
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<DataContext>();  // Only use in development
    context.Database.Migrate();
}

app.UseHttpsRedirection();

app.UseCors();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
